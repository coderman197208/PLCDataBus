#include <iostream>
#include <fstream>
#include <string>
#include "snap7.h" // 假设你已经包含了snap7库

class PLCConnection {
public:
    PLCConnection(const std::string& ip, int rack, int slot) : ip(ip), rack(rack), slot(slot) {}
    bool ConnectPLC() {
        // 实现连接PLC的逻辑
        return true;
    }
    std::string ReadDataRegion(const std::string& address, int area, int varEnum, int size) {
        // 实现读取PLC数据的逻辑
        return "1"; // 假设返回的是字符串形式的布尔值
    }
private:
    std::string ip;
    int rack;
    int slot;
};

class Tools {
public:
    static void PreciseSleep(long nanoseconds) {
        // 实现精确睡眠的逻辑
    }
};

int main() {
    PLCConnection plc("140.32.1.141", 0, 1);
    bool connected = plc.ConnectPLC();
    if (!connected) {
        std::cerr << "Failed to connect to PLC!" << std::endl;
        return -1;
    }

    int clock_2Hz, clock_1Hz, clock_0_5Hz;
    std::ofstream jsonFile("data.json");

    if (!jsonFile.is_open()) {
        std::cerr << "Failed to open data.json!" << std::endl;
        return -1;
    }

    jsonFile << "[]"; // 初始化空的JSON数组
    jsonFile.close();

    while (true) {
        clock_2Hz = std::stoi(plc.ReadDataRegion("M10.3", 0, 0, 1));
        clock_1Hz = std::stoi(plc.ReadDataRegion("M10.5", 0, 0, 1));
        clock_0_5Hz = std::stoi(plc.ReadDataRegion("M10.7", 0, 0, 1));

        // 打开JSON文件并追加数据
        std::ifstream inFile("data.json");
        std::string jsonData((std::istreambuf_iterator<char>(inFile)), std::istreambuf_iterator<char>());
        inFile.close();

        jsonData.pop_back(); // 移除末尾的']'
        if (jsonData.size() > 1) jsonData += ",";

        jsonData += "{\"clock_2Hz\":" + std::to_string(clock_2Hz) + 
                    ",\"clock_1Hz\":" + std::to_string(clock_1Hz) + 
                    ",\"clock_0_5Hz\":" + std::to_string(clock_0_5Hz) + "}]";

        std::ofstream outFile("data.json");
        outFile << jsonData;
        outFile.close();

        Tools::PreciseSleep(250000000); // 250ms
    }

    return 0;
}